<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="content-type"
 content="text/html; charset=ISO-8859-1">
  <title>Peerunit Howto</title>
</head>
<body>
<table style="text-align: left; width: 804px; height: 198px;" border="0"
 cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"><big style="font-weight: bold;"><big><big>How
to write a test<br>
      </big></big></big>___________________________________________________________________________________________________<br>
      <br>
This tutorial presents a generic way to write a test.<br>
      <br>
The complete code of this example is <a href="../java/Example.java">here</a>.<br>
      <br>
___________________________________________________________________________________________________<br>
      <br>
      <span style="font-weight: bold;">Let's
go to the main lines of code.</span><br>
      <br>
Initially the class TesterImpl must be inherited. Such class provides
the tags and methods that will be used throughout the test. <br>
      </td>
    </tr>
  </tbody>
</table>
<table style="text-align: left; width: 803px; height: 30px;" border="0"
 cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td
 style="vertical-align: top; background-color: rgb(192, 192, 192);"><small>public
class Example extends TesterImpl{<br>
      </small></td>
    </tr>
  </tbody>
</table>
<br>
<table style="text-align: left; width: 804px; height: 68px;" border="0"
 cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"> Now we need to export this
class. Indeed, the export will register all the
methods with the peerunit Coordinator. Once the registration finishes
the Coordinator
becomes aware of the execution sequence. Then, we can run the test.</td>
    </tr>
  </tbody>
</table>
<table style="text-align: left; width: 803px; height: 213px;" border="0"
 cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td
 style="vertical-align: top; background-color: rgb(192, 192, 192);"><small>&nbsp;&nbsp;&nbsp;
static Example test;<br>
      <br>
&nbsp;&nbsp;&nbsp; public static void main(String[] args) {<br>
      <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Instantiate this class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test = new Example();<br>
      <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Export in order to parse
the test methods<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test.export(test.getClass());<br>
      <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Run the test itself<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test.run();<br>
      </small></td>
    </tr>
  </tbody>
</table>
<br>
<table style="text-align: left; width: 804px; height: 198px;" border="0"
 cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;">To execute the test in the
correct
sequence, the methods should use some tags:<br>
      <span style="font-weight: bold;">@BeforeClass </span><br>
This tag is the first one executed by peerunit and can be used to start
something in the test, for instance a DHT.<br>
The parameters are:<br>
      <ul>
        <li>place (where it will execute)<br>
        </li>
        <li>timeout <br>
        </li>
      </ul>
      <br>
      <span style="font-weight: bold;">@AfterClass</span><br>
This tag is the last one executed by peerunit and can be used to start
something in the test, for instance a DHT. The parameters are the same
of the @BeforeClass. </td>
    </tr>
  </tbody>
</table>
<table style="text-align: left; width: 802px; height: 214px;" border="0"
 cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td
 style="vertical-align: top; background-color: rgb(192, 192, 192);"><small>&nbsp;&nbsp;&nbsp;
@BeforeClass(place=-1,timeout=100)<br>
&nbsp;&nbsp;&nbsp; public void start(){&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Pseudocode to instantiate a
peer&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Peer peer=new Peer();<br>
&nbsp;&nbsp;&nbsp; }<br>
      <br>
&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; @AfterClass(place=-1,timeout=100)<br>
&nbsp;&nbsp;&nbsp; public void stop(){<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; peer.leave();<br>
&nbsp;&nbsp;&nbsp; }<br>
}</small></td>
    </tr>
  </tbody>
</table>
<br>
<table style="text-align: left; width: 804px; height: 191px;" border="0"
 cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"><span style="font-weight: bold;">@Test</span><br>
This tag performs the actions of the test. For instance, put some data.<br>
The parameters are:<br>
      <ul>
        <li>place (if you specify a particular peer, or "-1" to be
executed in all peers)<br>
        </li>
        <li>from (if you specify a range of peers)<br>
        </li>
        <li>to (if you specify a range of peers)</li>
        <li>timeout</li>
        <li>name (the name of the action is used to sort the sequence
fo the actions)<br>
        </li>
        <li>step (is used to sort the actions with the same name) </li>
      </ul>
      </td>
    </tr>
  </tbody>
</table>
<table style="text-align: left; width: 804px; height: 471px;" border="0"
 cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td
 style="vertical-align: top; background-color: rgb(192, 192, 192);"><small>...<br>
      <br>
&nbsp;&nbsp;&nbsp; @Test(place=-1,timeout=100, name = "action1", step =
0)<br>
&nbsp;&nbsp;&nbsp; public void join(){&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Let's join the system<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; peer.join();<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; @Test(place=0,timeout=100, name = "action2", step =
0)<br>
&nbsp;&nbsp;&nbsp; public void put(){&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Put data<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; peer.put(expectedKey,expected);<br>
&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; @Test(from=1,to=3,timeout=100, name = "action3",
step = 0)<br>
&nbsp;&nbsp;&nbsp; public void retrieve(){<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Retrieving the inserted data<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
actual=peer.get(expectedKey);&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; @Test(from=1,to=3,timeout=100, name = "action4",
step = 0)<br>
&nbsp;&nbsp;&nbsp; public void assertRetrieve(){<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Let's see if we got the
expected data<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; assertEquals(expected, actual);<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
...<br>
      </small></td>
    </tr>
  </tbody>
</table>
<br>
<a href="../index.html">home</a>
<br>
____________________________________________________________________________________________________
</body>
</html>
